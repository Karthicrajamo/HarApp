ha
rimport React, {useEffect, useState, useRef} from 'react';
import SockJS from 'sockjs-client';
import {Stomp, Client} from '@stomp/stompjs';
import {TextEncoder} from 'text-encoding';
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  Vibration,
} from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import {launchImageLibrary} from 'react-native-image-picker'; // Import the correct method
import AudioRecorderPlayer from 'react-native-audio-recorder-player';
import {CustomThemeColors} from './CustomThemeColors';
import UUID from 'react-native-uuid';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import {compareAsc, format} from 'date-fns';
import {utcToZonedTime, toZonedTime} from 'date-fns-tz';
import API_URL from '../components/ApiUrl';

global.TextEncoder = TextEncoder;

const audioRecorderPlayer = new AudioRecorderPlayer();

const NoticeBoardScreen = ({group, userId, prevMessageHistory}) => {
  console.log(
    'received props from NOtice board List: \n>>>>>group : ',
    group,
    '\n',
    '>>>>> userId : ',
    userId,
    '>>>>>> prevConversation in NoticeBoardScreen CHat screen : ',
    prevMessageHistory,
  );

  const [message, setMessage] = useState('Start messaging ...');
  const [messageHistory, setMessageHistory] = useState(
    prevMessageHistory || [],
  );
  const [typedMessage, setTypedMessage] = useState('');
  const [stompClient, setStompClient] = useState(null);
  const [connectionStatus, setConnectionStatus] = useState('Connecting...');
  const [loading, setLoading] = useState(false);

  // useEffect(() => {}, [messageHistory]);
  useEffect(() => {
    setMessageHistory(prevMessageHistory);

    setLoading(true);
    const socketUrl = 'http://192.168.0.107:8084/websocket';
    const socket = new SockJS(socketUrl);
    const client = new Client({
      webSocketFactory: () => socket,
      reconnectDelay: 5000,
      onConnect: frame => {
        console.log('Connected: ' + frame);
        setStompClient(client);
        setConnectionStatus('Online');

        client.subscribe(
          `/topic/listen/group/${group.noticeBoardId}`,
          response => {
            const receivedData = JSON.parse(response.body);
            const receivedMessage = receivedData.body;
            console.log('Received message: hrt5jjg94', receivedMessage);
            console.log('Received message: hrt56tg', receivedMessage.sender);

            setMessage(receivedMessage.message);

            console.log(
              'listening use effect triggered !!! 999098766553gg3g76 :',
            );
            // Check if the message already exists in the history before adding
            setMessageHistory(prevHistory => {
              const alreadyExists = prevHistory.some(
                msg => msg.referenceId === receivedMessage.referenceId,
              );

              if (!alreadyExists) {
                return [
                  ...prevHistory,
                  {
                    sender: receivedMessage.sender,
                    text: receivedMessage.message,
                    timeStamp: receivedMessage.timeStamp,
                    type: 'received',
                    referenceId: receivedMessage.referenceId,
                    messageType: receivedMessage.type,
                    messageId: receivedMessage.messageId,
                  },
                ];
              }
              return prevHistory;
            });
          },
        );

        setLoading(false);
      },
      onStompError: error => {
        console.log('STOMP error:', error);
        setConnectionStatus('Connection error');
        setLoading(false);
      },
    });

    client.activate();

    return () => {
      if (client.connected) {
        client.deactivate();
        console.log('Disconnected');
        setConnectionStatus('Disconnected, Connecting Again...');
      }
    };
  }, [prevMessageHistory.length > 0]);

  const sendMessage = () => {
    console.log('userId while messaging j5iji5lklkjij5i4i : ', userId);
    const now = new Date();
    const formattedTimestamp = format(now, 'yyyy-MM-dd HH:mm:ss.SSS');
    if (stompClient && typedMessage.trim() !== '') {
      const messageId = UUID.v4();
      const newMessage = {
        message: typedMessage,
        referenceId: messageId,
        messageType: 'CHAT',
        sender: userId,
        timeStamp: formattedTimestamp,
        groupId: group.noticeBoardId,
      };
      // Optimistically add the message to the history to avoid waiting for the subscription
      // setMessageHistory(prevHistory => {
      //   const alreadyExists = prevHistory.some(
      //     msg => msg.referenceId === typedMessage.referenceId,
      //   );

      //   if (!alreadyExists) {
      //     return [
      //       ...prevHistory,
      //       {
      //         sender: userId,
      //         text: typedMessage,
      //         timeStamp: formattedTimestamp,
      //         type: 'sent',
      //         referenceId: messageId,
      //       },
      //     ];
      //   }
      //   return prevHistory;
      // });
      const JsonNewMessageString = JSON.stringify(newMessage);
      console.log('sent Messages mm98985n', JsonNewMessageString);
      stompClient.publish({
        destination: `/app/group/${group.noticeBoardId}/sendMessage`,
        body: JsonNewMessageString,
      });
    }
    setTypedMessage('');
  };

  // const chooseFile = () => {
  //   const options = {
  //     mediaType: 'mixed',
  //     includeBase64: false,
  //   };

  const chooseFile = async () => {
    const options = {
      mediaType: 'mixed',
      selectionLimit: 0, // 0 allows multiple selection
    };

    const response = await launchImageLibrary(options);

    if (response.didCancel) {
      console.log('User cancelled image picker');
    } else if (response.errorCode) {
      console.log('ImagePicker Error: ', response.errorMessage);
    } else {
      const files = response.assets;
      const formData = new FormData();

      files.forEach((file, index) => {
        formData.append('file', {
          uri: file.uri,
          type: file.type,
          name: file.fileName || `file_${index}`,
        });
      });

      try {
        const uploadResponse = await fetch('http://192.168.0.107:8084/upload', {
          method: 'POST',
          body: formData,
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });

        const data = await uploadResponse.json();
        console.log('Uploaded file:', data);

        // Send metadata to WebSocket
        if (stompClient) {
          const now = new Date();
          const formattedTimestamp = format(now, 'yyyy-MM-dd HH:mm:ss.SSS');
          const messageId = UUID.v4();

          const fileMessage = {
            message: `File uploaded: ${data.fileName}`,
            referenceId: messageId,
            messageType: 'FILE',
            sender: userId,
            timeStamp: formattedTimestamp,
            groupId: group.noticeBoardId,
            fileUrl: data.fileUrl,
            fileName: data.fileName,
          };

          stompClient.publish({
            destination: `/app/group/${group.noticeBoardId}/sendMessage`,
            body: JSON.stringify(fileMessage),
          });
        }
      } catch (error) {
        console.error('File upload error:', error);
      }
    }
    launchImageLibrary(options, response => {
      // referenceId;
      if (response.didCancel) {
        console.log('User cancelled image picker');
      } else if (response.errorCode) {
        console.log('ImagePicker Error: ', response.errorMessage);
      } else {
        console.log('Selected file:', response.assets[0]);
      }
    });
  };

  // };

  const startRecording = async () => {
    const result = await audioRecorderPlayer.startRecorder();
    console.log('Recording started:', result);
  };

  const stopRecording = async () => {
    const result = await audioRecorderPlayer.stopRecorder();
    console.log('Recording stopped:', result);
  };

  const toTitleCase = str => {
    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
  };

  const scrollViewRef = useRef();

  // useEffect(() => {
  //   if (scrollViewRef.current) {
  //     scrollViewRef.current.scrollToEnd({animated: false});
  //   }
  // }, [messageHistory]);

  // const formatTimestamp = utcTime => {
  //   const date = new Date(utcTime);

  //   const hours = date.getHours();
  //   const minutes = date.getMinutes().toString().padStart(2, '0');

  //   const ampm = hours >= 12 ? 'PM' : 'AM';
  //   const formattedHours = hours % 12 || 12; // Convert to 12-hour format

  //   return `${formattedHours}:${minutes} ${ampm}`;
  // };
  const formatTimestamp = utcTime => {
    // Parse the string to a Date object
    const date = new Date(utcTime);

    // console.log('date njjke890909090ne8 : ', date);
    // console.log(
    //   'Intl.DateTimeFormat().resolvedOptions().timeZone njjke890909090ne8 : ',
    //   Intl.DateTimeFormat().resolvedOptions().timeZone,
    // );
    // Convert UTC time to local time
    const zonedTime = toZonedTime(
      date,
      Intl.DateTimeFormat().resolvedOptions().timeZone,
    );

    // Format the time to "hh:mm a" (12-hour clock with AM/PM)
    const formattedTime = format(zonedTime, 'MMM dd, yyyy hh:mm a');
    // const formattedTime = format(zonedTime, 'hh:mm a');
    return formattedTime;
  };
  const handleDeleteMessage = messageIds => {
    // Call the API to delete the message
    console.log(
      'Selected Message Ids for Slection in handle delete Message : 8788960873j90683',
      messageIds,
    );
    console.log(
      'DELETE MESSAGE API : llhmkkkoophh943n',
      `${API_URL}/deleteMessage?nbid=${group.noticeBoardId}&usrid=${userId}`,
    );
    fetch(
      `${API_URL}/api/noticeBoard/deleteMessage?nbid=${group.noticeBoardId}&usrid=${userId}`,
      {
        method: 'DELETE',
        body: messageIds,
      },
    )
      .then(response => {
        if (response.ok) {
          console.log('Message deleted successfully');
          // Update the UI after deletion
          setMessageHistory(prevMessages =>
            prevMessages.filter(msg => msg.messageId !== messageId),
          );
          // Clear any long-pressed message state
          setSelectedMessageIds([]);
        } else {
          console.error('Failed to delete the message');
          return response.text().then(text => {
            throw new Error(text || 'Failed to delete the message');
          });
        }
      })
      .catch(error => {
        console.error('Error deleting message:', error.message);
        Alert.alert(
          'Error',
          'Failed to delete the message. Please try again later.',
        );
      });
  };

  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedMessageIds, setSelectedMessageIds] = useState([]);

  const isSelected = messageId => {
    return selectedMessageIds.includes(messageId);
  };

  const handleDeleteSelectedMessages = () => {
    // selectedMessageIds.forEach(messageId => {
    //   handleDeleteMessage(messageId);
    // });
    console.log(
      'SELECTED MESSAGE ID FOR DELETION : MLKLKLKGS088978GSJ',
      selectedMessageIds,
    );
    handleDeleteMessage(selectedMessageIds);
    //API
    setSelectedMessageIds([]); // Clear selection after deletion
    setSelectionMode(false);
  };
  const handleLongPressMessage = messageId => {
    Vibration.vibrate(100);
    console.log('Long press detected, messageId: mvmvbg6565h', messageId);
    console.log('Current selection mode: jfjfyu5675674', selectionMode);

    if (!selectionMode) {
      setSelectionMode(true);
    }
    // if (!selectedMessageIds.includes(messageId)) {
    //   setSelectedMessageIds([...selectedMessageIds, messageId]);
    // }
    toggleSelection(messageId);
  };

  const handlePressMessage = messageId => {
    Vibration.vibrate(100);
    console.log('Single press detected, messageId: 524asre2r2ad ', messageId);
    console.log('Current selection mode: ii789684653242gd', selectionMode);

    if (selectionMode) {
      toggleSelection(messageId);
    }
  };

  const toggleSelection = messageId => {
    if (selectedMessageIds.includes(messageId)) {
      setSelectedMessageIds(selectedMessageIds.filter(id => id !== messageId));
    } else {
      setSelectedMessageIds([...selectedMessageIds, messageId]);
    }

    // If no more messages are selected, exit selection mode
    if (
      selectedMessageIds.length === 1 &&
      selectedMessageIds.includes(messageId)
    ) {
      setSelectionMode(false);
    }
  };
  const confirmDelete = () => {
    Alert.alert(
      'Delete Messages',
      'Are you sure you want to delete the selected messages?',
      [
        {
          text: 'Cancel',
          style: 'cancel',
          onPress: () => {
            setSelectedMessageIds([]);
            setSelectionMode(false);
          },
        },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: () => handleDeleteSelectedMessages(),
        },
      ],
      {cancelable: true},
    );
  };

  return (
    <View style={styles.container}>
      <View style={{flexDirection: 'row', width: '100%'}}>
        <Text
          style={{
            width: '90%',
            borderRadius: 10,
            color: 'white',
            fontWeight: '600',
            marginBottom: 10,
            padding: 10,
            backgroundColor: CustomThemeColors.primary,
            fontSize: 25,
            alignItems: 'center',
            textAlign: 'center',
          }}>
          {group.noticeBoardName}
        </Text>
        <View>
          {selectedMessageIds.length > 0 && (
            <TouchableOpacity
              style={styles.deleteButton}
              onPress={confirmDelete}>
              <Icon name="delete" size={24} color="red" />
            </TouchableOpacity>
          )}
        </View>
      </View>
      <Text style={[styles.status]}>{connectionStatus}</Text>
      {loading ? (
        <ActivityIndicator size="large" color="#0000ff" />
      ) : (
        <>
          <ScrollView
            style={styles.scrollView}
            ref={scrollViewRef}
            onContentSizeChange={() =>
              scrollViewRef.current.scrollToEnd({animated: false})
            }>
            {messageHistory.length > 0 ? (
              messageHistory.map((msg, index) =>
                msg.type === 'received' ? (
                  //If received message type is FILE then treat it as a file and put it in a filemessage bubble
                  msg.messageType === 'FILE' ? (
                    <View
                      key={index}
                      // onLongPress={() => setLongPressedMessageId(msg.messageId)}
                      style={[
                        styles.messageContainer,
                        msg.sender === userId
                          ? styles.sentMessageContainer
                          : styles.receivedMessageContainer,
                      ]}>
                      <TouchableOpacity
                        key={index}
                        style={[
                          msg.sender === userId
                            ? styles.sentMessageBubble
                            : styles.receivedMessageBubble,
                          isSelected(msg.messageId)
                            ? {
                                ...styles.selectedMessageBubble,
                              }
                            : null,
                        ]}
                        // disabled={() => msg.sender === userId}
                        onLongPress={() => {
                          if (msg.sender === userId) {
                            handleLongPressMessage(msg.messageId);
                          }
                        }}
                        onPress={() => {
                          if (selectionMode) {
                            if (msg.sender === userId) {
                              handlePressMessage(msg.messageId);
                            }
                          }
                        }}>
                        <View style={styles.fileMessageBubble}>
                          <Text style={styles.fileName}>{msg.fileName}</Text>
                          <TouchableOpacity
                            onPress={() => openFile(msg.fileUrl)}>
                            <Text style={styles.downloadLink}>Download</Text>
                          </TouchableOpacity>
                          <Text style={styles.timestamp}>
                            {formatTimestamp(msg.timeStamp)}
                          </Text>
                        </View>
                      </TouchableOpacity>
                      {/* {selectedMessageIds.length > 0 && (
                        <TouchableOpacity
                          style={styles.deleteButton}
                          onPress={confirmDelete}>
                          <Icon name="delete" size={24} color="white" />
                        </TouchableOpacity>
                      )} */}
                    </View>
                  ) : (
                    //If received message type is Not a FILE then treat it as a normal text message and put it in a messagebubble
                    <View
                      key={index}
                      style={[
                        styles.messageContainer,
                        msg.sender === userId
                          ? styles.sentMessageContainer
                          : styles.receivedMessageContainer,
                      ]}>
                      <TouchableOpacity
                        style={[
                          msg.sender === userId
                            ? styles.sentMessageBubble
                            : styles.receivedMessageBubble,
                          selectedMessageIds.includes(msg.messageId) &&
                            styles.selectedMessageBubble,
                          isSelected(msg.messageId)
                            ? {
                                ...styles.selectedMessageBubble,
                              }
                            : null,
                        ]}
                        onLongPress={() => {
                          if (msg.sender === userId) {
                            handleLongPressMessage(msg.messageId);
                          }
                        }}
                        onPress={() => {
                          if (selectionMode) {
                            if (msg.sender === userId) {
                              handlePressMessage(msg.messageId);
                            }
                          }
                        }}>
                        <View style={{flexDirection: 'row'}}>
                          <MaterialIcons
                            name="account-circle"
                            size={14}
                            style={{
                              color: CustomThemeColors.primary,
                              marginRight: 5,
                              marginBottom: 3,
                            }}
                          />
                          <Text style={styles.userName}>
                            {msg.sender !== null && msg.sender !== ''
                              ? msg.sender === userId
                                ? `${toTitleCase(msg.sender)} (You)`
                                : toTitleCase(msg.sender)
                              : 'Anonymous'}
                          </Text>
                        </View>

                        <Text style={styles.messageText}>{msg.text}</Text>
                        <Text style={styles.timestamp}>
                          {formatTimestamp(msg.timeStamp)}
                        </Text>
                      </TouchableOpacity>
                      {/* {selectedMessageIds.length > 0 && (
                        <TouchableOpacity
                          style={styles.deleteButton}
                          onPress={confirmDelete}>
                          <Icon name="delete" size={24} color="white" />
                        </TouchableOpacity>
                      )} */}
                    </View>
                  )
                ) : null,
              )
            ) : (
              //if messages history desnt exist then show typed message
              <Text style={styles.messageText}>{message}</Text>
            )}
          </ScrollView>
          <View style={styles.inputContainer}>
            <TouchableOpacity style={styles.iconButton} onPress={chooseFile}>
              <Icon name="attach-file" size={24} color="#000" />
            </TouchableOpacity>
            <TextInput
              style={styles.input}
              placeholder="Type your message"
              value={typedMessage}
              onChangeText={setTypedMessage}
            />
            {/* <TouchableOpacity style={styles.sendButton} onPress={sendMessage}> */}
            <TouchableOpacity
              style={{paddingHorizontal: 10}}
              onPress={sendMessage}>
              {/* <Text style={styles.sendButtonText}>Send</Text> */}
              <Icon name="send" size={26} color="#125fee" />
            </TouchableOpacity>
            {/* <TouchableOpacity
              style={styles.iconButton}
              onPress={startRecording}>
              <Icon name="mic" size={24} color="#000" />
            </TouchableOpacity>
            <TouchableOpacity style={styles.iconButton} onPress={stopRecording}>
              <Icon name="stop" size={24} color="#000" />
            </TouchableOpacity> */}
          </View>
        </>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'space-between',
    padding: 10,
    backgroundColor: CustomThemeColors.H,
  },
  status: {
    width: '100%',
    textAlign: 'center',
    fontWeight: '500',
    fontSize: 18,
    marginBottom: 10,
    color: '#40a717',
  },
  scrollView: {
    flex: 1,
    marginBottom: 10,
  },
  messageContainer: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  sentMessageContainer: {
    justifyContent: 'flex-end',
  },
  receivedMessageContainer: {
    justifyContent: 'flex-start',
  },
  sentMessageBubble: {
    backgroundColor: CustomThemeColors.fadedPrimary,
    padding: 10,
    maxWidth: '80%',
    borderTopLeftRadius: 20,
    borderBottomRightRadius: 20,
    borderBottomLeftRadius: 10,
  },
  receivedMessageBubble: {
    backgroundColor: CustomThemeColors.fadedPrimary,
    padding: 10,
    maxWidth: '80%',
    borderTopRightRadius: 20,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 10,
  },
  fileMessageBubble: {
    padding: 10,
    borderRadius: 10,
    backgroundColor: '#e0e0e0',
    maxWidth: '80%',
    alignSelf: 'flex-start',
  },
  fileName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  downloadLink: {
    color: '#125fee',
    textDecorationLine: 'underline',
    marginTop: 5,
    fontSize: 14,
  },
  messageText: {
    fontSize: 16,
    color: '#333',
  },
  timestamp: {
    fontSize: 12,
    color: '#888',
    alignSelf: 'flex-end',
  },
  userName: {
    fontSize: 12,
    color: '#888',
    alignSelf: 'flex-start',
  },
  selectedMessageBubble: {
    backgroundColor: 'rgba(255, 0, 0, 0.2)', // Light red shade
  },
  deleteButton: {
    alignItems: 'center',
    justifyContent: 'center',
    // position: 'absolute',
    // right: 10,
    top: 10,
    marginLeft: 10,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    backgroundColor: CustomThemeColors.fadedPrimary,
    borderRadius: 10,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    borderRadius: 20,
    flex: 1,
    paddingHorizontal: 10,
    marginRight: 10,
  },
  sendButton: {
    backgroundColor: '#007bff',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 20,
  },
  sendButtonText: {
    color: '#fff',
    fontSize: 16,
  },
  iconButton: {
    marginHorizontal: 5,
  },
});

export default NoticeBoardScreen;
